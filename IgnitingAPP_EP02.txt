NPM 
npm manages packages 
does not stand for Node Package Manager


package.json is a configuration for NPM packages

Our project requires many dependency and these dependencies are managed by package.json file with various versions

#Most imp package in our project is Bundler(webpack, Parcel, wheat)
Bundler - A bundler is a tool that puts together all your JavaScript code and its dependencies and throws a new JavaScript output file with everything merged, ready for the web, commonly known as the bundle file

git init - initialises the git project 

npm init - will initiliaze npm package in our project

npm install -D (package name)
-D dev Dependencies - required only for development phase 
Normal dependencies 

difference between ^(charact) and ~(tilde) in package.json
2.8.0
2 - major version
8 - minor version 
0 patch version

tilde - it will auto update to patch versions 2.8.0 to 2.8.X
caret - it will auto update to minor/patch versions 2.8.0 to 2.X.X
The Caret & tilde explanation is incorrect. Tilde doesn't upgrade the major version, it just upgrades the patch version. Caret upgrades the minor versions, none of these upgrades  major versions. npm follows semantic versioning, they are in the format of major.minor.patch
2.3.8 means 2 is major, 3 is minor, 8 is patch
~2.3.8 means it will install 2.3.x but never 2.4.x
^2.3.8 means it will install 2.x.x but never 3.x.x
Please rectify.

package.json - configuration of npm and keeps a track of all the version of all dependencies installed in the project

package-lock.json - keeps a track of  every version and locks the version.
=>whatever we have in our local, we can install the modules in production

node modules - it fetch all the code of all dependencies and acts as a database

Transitive dependencies - we installed parcel which required its own dependencies and indirectly parcel dependencies required its own sub dependencies

there are multiple package.json files in our project 
1. package.json in our root project directory 
2. every nodemodules packages has its own package.json files in it 


build our app from parcel 
npx parcel index.html

npx is similar to npm 
while npm is used to install a package and npx is used to execute a package

=>React CDN LINKs
its not a recommended way to include react cdn links into our project 
why => 
1. as the cdn link makes an external call to another server to fetch react libraries
2. what if we want to change the version of react, then we have to change the URL of cdn lik as well,
==> hence it is prefered if we install the react and reactdom modules in the node_modules and easier to manage all the dependencies

install react as a package

# Parcel 
-dev build 
-local server 
-HMR - hot module replacement
File watching algorithm - written in C++
Caching - Faster Builds
Image optimization
Minification
Bundling
Compress your files
Consistent Hashing
Code Splitting
Differential Bundling(supporting multiple/ older browser)
Diagnostic
Error Handling
HTTPs
Tree shaking(remove unused code for you)
Different build bundles for dev and prod


for local build - npx parcel index.html
for prod build - npx parcel build index.html

browserlist - https://browserslist.dev/?q=bGFzdCAyIGZpcmVmb3ggdmVyc2lvbnM%3D
last 2 Chrome version - will make sure the project will definetly work on last 2 versions of chrome
last 2 Firefox version - will make sure the project will definetly work on last 2 versions of Firefox

we use browserlist for government websites to make sure the site works for older versions as well

we can also use country specific, OS specific


